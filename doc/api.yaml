openapi: 3.0.1
info:
  title: X-Base API
  version: 1.0.0
tags:
- name: Organization
- name: Table
- name: Folder
paths:
  /organizations:
    get:
      tags:
      - Organization
      summary: Get organization list
      parameters:
      - $ref: "#/components/parameters/sort"
      - $ref: "#/components/parameters/page"
      - $ref: "#/components/parameters/pageSize"
      responses:
        200:
          description: Organization list
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/OrganizationList'
    post:
      tags:
      - Organization
      summary: Create organization
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateOrganizationInput'
        required: true
      responses:
        200:
          description: Created organization
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Organization'
  /organizations/{organizationId}:
    parameters:
    - $ref: "#/components/parameters/organizationId"
    get:
      tags:
      - Organization
      summary: Get organization
      responses:
        200:
          description: Organization
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Organization'
    delete:
      tags:
      - Organization
      summary: Delete organization
      responses:
        200:
          description: Deleted
    patch:
      tags:
      - Organization
      summary: Update organization
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UpdateOrganizationInput'
        required: true
      responses:
        200:
          description: Updated organization
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Organization'
  /tables:
    post:
      tags:
      - Table
      summary: Create table
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateTableInput'
        required: true
      responses:
        200:
          description: Created table
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Table'
  /tables/{tableId}:
    parameters:
    - $ref: "#/components/parameters/tableId"
    get:
      tags:
      - Table
      summary: Get table
      responses:
        200:
          description: Table
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Table'
    delete:
      tags:
      - Table
      summary: Delete table
      responses:
        200:
          description: Deleted
    patch:
      tags:
      - Table
      summary: Update table
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UpdateTableInput'
        required: true
      responses:
        200:
          description: Updated table
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Table'
  /tables/{tableId}/columns:
    parameters:
    - $ref: "#/components/parameters/tableId"
    post:
      tags:
      - Table
      summary: Create column
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateColumnInput'
        required: true
      responses:
        200:
          description: Created column
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Column'
  /tables/{tableId}/columns/{columnId}:
    parameters:
    - $ref: "#/components/parameters/tableId"
    - $ref: "#/components/parameters/columnId"
    delete:
      tags:
      - Table
      summary: Delete column
      responses:
        200:
          description: Deleted
    patch:
      tags:
      - Table
      summary: Update column
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UpdateColumnInput'
        required: true
      responses:
        200:
          description: Updated column
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Column'
  /tables/{tableId}/columns/reorder:
    parameters:
    - $ref: "#/components/parameters/tableId"
    post:
      tags:
      - Table
      summary: Reorder columns
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ReorderColumnInput'
        required: true
      responses:
        200:
          description: Reordered columns
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ColumnList'
  /tables/{tableId}/query:
    parameters:
    - $ref: "#/components/parameters/tableId"
    post:
      tags:
      - Table
      summary: Manipulate table records
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/QueryTableRecordInput'
        required: true
      responses:
        200:
          description: Query result
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/QueryTableRecordResult'
  /folders:
    post:
      tags:
      - Folder
      summary: Create folder
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateFolderInput'
        required: true
      responses:
        200:
          description: Created folder
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Folder'
  /folders/{folderId}:
    parameters:
    - $ref: "#/components/parameters/folderId"
    get:
      tags:
      - Folder
      summary: Get folder
      responses:
        200:
          description: Folder
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Folder'
    delete:
      tags:
      - Folder
      summary: Delete folder
      responses:
        200:
          description: Deleted
    patch:
      tags:
      - Folder
      summary: Update folder
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UpdateFolderInput'
        required: true
      responses:
        200:
          description: Updated folder
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Folder'
  /folders/{folderId}/children:
    parameters:
    - $ref: "#/components/parameters/folderId"
    get:
      tags:
      - Folder
      summary: Get folder's children
      description: Specify `00000000-0000-0000-0000-000000000000` as `folderId` path
        parameter and target organization id as `organizationId` query parameter for
        retrieving entries at the root folder of the organization.
      parameters:
      - $ref: "#/components/parameters/organizationIdQuery"
      - $ref: "#/components/parameters/sort"
      - $ref: "#/components/parameters/page"
      - $ref: "#/components/parameters/pageSize"
      responses:
        200:
          description: Folder's children
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/FolderChildren'
components:
  schemas:
    PaginatedList:
      type: object
      required:
      - hasNext
      - totalCount
      properties:
        totalCount:
          type: integer
        hasNext:
          type: boolean
    CreateOrganizationInput:
      type: object
    UpdateOrganizationInput:
      type: object
    Organization:
      type: object
      required:
      - createdAt
      - id
      - updatedAt
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    OrganizationList:
      allOf:
      - $ref: '#/components/schemas/PaginatedList'
      - type: object
        required:
        - organizations
        properties:
          organizations:
            type: array
            items:
              $ref: '#/components/schemas/Organization'
    TableFilesystemEntry:
      type: object
      required:
      - createdAt
      - id
      - organizationId
      - path
      - type
      - updatedAt
      properties:
        id:
          type: string
          format: uuid
        organizationId:
          type: string
          format: uuid
        type:
          type: string
          enum:
          - folder
          - table
        path:
          type: array
          items:
            type: object
            required:
            - id
            - type
            properties:
              id:
                type: string
                format: uuid
              type:
                type: string
                enum:
                - folder
                - table
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CreateTableInput:
      type: object
      required:
      - organizationId
      properties:
        organizationId:
          type: string
          format: uuid
        parentFolderId:
          type: string
          format: uuid
        columns:
          type: array
          items:
            $ref: '#/components/schemas/CreateColumnInput'
    UpdateTableInput:
      type: object
      properties:
        parentFolderId:
          type: string
          description: Specify `00000000-0000-0000-0000-000000000000` to move to the
            root folder
          format: uuid
    Table:
      allOf:
      - $ref: '#/components/schemas/TableFilesystemEntry'
      - type: object
        required:
        - columns
        properties:
          columns:
            type: array
            items:
              $ref: '#/components/schemas/Column'
    CreateColumnInput:
      type: object
      properties:
        index:
          type: integer
    UpdateColumnInput:
      type: object
      properties:
        index:
          type: integer
    ReorderColumnInput:
      type: object
      required:
      - order
      properties:
        order:
          type: array
          items:
            type: string
            format: uuid
    Column:
      type: object
      required:
      - createdAt
      - id
      - index
      - tableId
      - updatedAt
      properties:
        id:
          type: string
          format: uuid
        tableId:
          type: string
          format: uuid
        index:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ColumnList:
      type: object
      required:
      - columns
      properties:
        columns:
          type: array
          items:
            $ref: '#/components/schemas/Column'
    QueryTableRecordInput:
      oneOf:
      - $ref: "#/components/schemas/InsertQuery"
      - $ref: "#/components/schemas/SelectQuery"
      - $ref: "#/components/schemas/UpdateQuery"
      - $ref: "#/components/schemas/DeleteQuery"
    InsertQuery:
      type: object
      required:
      - insert
      properties:
        insert:
          type: object
          required:
          - columns
          - values
          properties:
            columns:
              type: array
              items:
                $ref: "#/components/schemas/ColumnExpr"
            values:
              type: array
              items:
                type: array
                items:
                  $ref: "#/components/schemas/ValueExpr"
    SelectQuery:
      type: object
      required:
      - columns
      properties:
        columns:
          type: array
          items:
            $ref: "#/components/schemas/Expr"
        where:
          $ref: "#/components/schemas/Expr"
        orderBy:
          type: array
          items:
            $ref: "#/components/schemas/SortKey"
        offset:
          type: integer
        limit:
          type: integer
    UpdateQuery:
      type: object
      required:
      - set
      - where
      properties:
        set:
          type: array
          items:
            $ref: "#/components/schemas/UpdateSet"
        where:
          $ref: "#/components/schemas/Expr"
    DeleteQuery:
      type: object
      required:
      - where
      properties:
        where:
          $ref: "#/components/schemas/Expr"
    Expr:
      oneOf:
      - $ref: "#/components/schemas/MetadataExpr"
      - $ref: "#/components/schemas/ColumnExpr"
      - $ref: "#/components/schemas/ValueExpr"
      - $ref: "#/components/schemas/FuncExpr"
      - $ref: "#/components/schemas/RelationalExpr"
      - $ref: "#/components/schemas/LogicalExpr"
      - $ref: "#/components/schemas/ArithmeticExpr"
    MetadataExpr:
      type: object
      required:
      - metadata
      properties:
        metadata:
          type: string
          enum:
          - id
          - createdAt
    ColumnExpr:
      type: object
      required:
      - column
      properties:
        column:
          type: string
          format: uuid
    ValueExpr:
      type: object
      required:
      - value
      properties:
        value:
          nullable: true
          oneOf:
          - type: string
          - type: number
          - type: boolean
    FuncExpr:
      type: object
      required:
      - func
      properties:
        func:
          type: string
          enum:
          - count
        args:
          type: array
          items:
            $ref: "#/components/schemas/Expr"
    RelationalExpr:
      oneOf:
      - type: object
        required:
        - eq
        properties:
          eq:
            type: array
            items:
              $ref: "#/components/schemas/Expr"
      - type: object
        required:
        - ne
        properties:
          ne:
            type: array
            items:
              $ref: "#/components/schemas/Expr"
      - type: object
        required:
        - gt
        properties:
          gt:
            type: array
            items:
              $ref: "#/components/schemas/Expr"
      - type: object
        required:
        - ge
        properties:
          ge:
            type: array
            items:
              $ref: "#/components/schemas/Expr"
      - type: object
        required:
        - lt
        properties:
          lt:
            type: array
            items:
              $ref: "#/components/schemas/Expr"
      - type: object
        required:
        - le
        properties:
          le:
            type: array
            items:
              $ref: "#/components/schemas/Expr"
      - type: object
        required:
        - like
        properties:
          like:
            type: array
            items:
              $ref: "#/components/schemas/Expr"
      - type: object
        required:
        - isNull
        properties:
          isNull:
            $ref: "#/components/schemas/Expr"
    LogicalExpr:
      oneOf:
      - type: object
        required:
        - and
        properties:
          and:
            type: array
            items:
              $ref: "#/components/schemas/Expr"
      - type: object
        required:
        - or
        properties:
          or:
            type: array
            items:
              $ref: "#/components/schemas/Expr"
      - type: object
        required:
        - not
        properties:
          not:
            $ref: "#/components/schemas/Expr"
    ArithmeticExpr:
      oneOf:
      - type: object
        required:
        - add
        properties:
          add:
            type: array
            items:
              $ref: "#/components/schemas/Expr"
      - type: object
        required:
        - sub
        properties:
          sub:
            type: array
            items:
              $ref: "#/components/schemas/Expr"
      - type: object
        required:
        - mul
        properties:
          mul:
            type: array
            items:
              $ref: "#/components/schemas/Expr"
      - type: object
        required:
        - div
        properties:
          div:
            type: array
            items:
              $ref: "#/components/schemas/Expr"
      - type: object
        required:
        - mod
        properties:
          mod:
            type: array
            items:
              $ref: "#/components/schemas/Expr"
      - type: object
        required:
        - neg
        properties:
          neg:
            $ref: "#/components/schemas/Expr"
    SortKey:
      type: object
      required:
      - key
      properties:
        key:
          $ref: "#/components/schemas/Expr"
        order:
          type: string
          enum:
          - asc
          - desc
    UpdateSet:
      type: object
      required:
      - to
      - value
      properties:
        to:
          $ref: "#/components/schemas/ColumnExpr"
        value:
          $ref: "#/components/schemas/Expr"
    QueryTableRecordResult:
      oneOf:
      - $ref: "#/components/schemas/InsertQueryResult"
      - $ref: "#/components/schemas/SelectQueryResult"
      - $ref: "#/components/schemas/UpdateQueryResult"
      - $ref: "#/components/schemas/DeleteQueryResult"
    InsertQueryResult:
      type: object
      required:
      - recordIds
      properties:
        recordIds:
          type: array
          items:
            type: string
            format: uuid
    SelectQueryResult:
      type: object
      required:
      - records
      properties:
        records:
          type: array
          items:
            type: array
            items:
              nullable: true
              oneOf:
              - type: string
              - type: number
              - type: boolean
    UpdateQueryResult:
      type: object
    DeleteQueryResult:
      type: object
    CreateFolderInput:
      type: object
      required:
      - organizationId
      properties:
        organizationId:
          type: string
          format: uuid
        parentFolderId:
          type: string
          format: uuid
    UpdateFolderInput:
      type: object
      properties:
        parentFolderId:
          type: string
          description: Specify `00000000-0000-0000-0000-000000000000` to move to the
            root folder
          format: uuid
    Folder:
      allOf:
      - $ref: '#/components/schemas/TableFilesystemEntry'
    FolderChildren:
      allOf:
      - $ref: '#/components/schemas/PaginatedList'
      - type: object
        required:
        - children
        properties:
          children:
            type: array
            items:
              $ref: '#/components/schemas/TableFilesystemEntry'
  parameters:
    organizationId:
      name: organizationId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    organizationIdQuery:
      name: organizationId
      in: query
      schema:
        type: string
        format: uuid
    tableId:
      name: tableId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    columnId:
      name: columnId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    folderId:
      name: folderId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    sort:
      description: |
        `FIELD:asc` or `FIELD:desc` mean "Sort by FIELD in ascending/descending order".
        `FIELD:(value1 value2)` means "Sort by FIELD in order of value1, value2".
        Multiple sort fields are joined with ",".
      name: sort
      in: query
      schema:
        type: string
      example: "field1:asc,field2:desc,field3:(value1 value2)"
    page:
      name: page
      in: query
      schema:
        type: integer
    pageSize:
      name: pageSize
      in: query
      schema:
        type: integer
