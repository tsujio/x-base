openapi: 3.0.1
info:
  title: X-Base API
  version: 1.0.0
tags:
- name: Organization
- name: Table
- name: Folder
paths:
  /organizations:
    get:
      tags:
      - Organization
      summary: Get organization list
      parameters:
      - $ref: "#/components/parameters/page"
      - $ref: "#/components/parameters/pageSize"
      responses:
        200:
          description: Organization list
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/OrganizationList'
    post:
      tags:
      - Organization
      summary: Create organization
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateOrganizationInput'
        required: true
      responses:
        200:
          description: Created organization
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Organization'
  /organizations/{organizationId}:
    parameters:
    - $ref: "#/components/parameters/organizationId"
    get:
      tags:
      - Organization
      summary: Get organization
      responses:
        200:
          description: Organization
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Organization'
    delete:
      tags:
      - Organization
      summary: Delete organization
      responses:
        200:
          description: Deleted
    patch:
      tags:
      - Organization
      summary: Update organization
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UpdateOrganizationInput'
        required: true
      responses:
        200:
          description: Updated organization
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Organization'
  /tables:
    post:
      tags:
      - Table
      summary: Create table
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateTableInput'
        required: true
      responses:
        200:
          description: Created table
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Table'
  /tables/{tableId}:
    parameters:
    - $ref: "#/components/parameters/tableId"
    get:
      tags:
      - Table
      summary: Get table
      responses:
        200:
          description: Table
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Table'
    delete:
      tags:
      - Table
      summary: Delete table
      responses:
        200:
          description: Deleted
    patch:
      tags:
      - Table
      summary: Update table
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UpdateTableInput'
        required: true
      responses:
        200:
          description: Updated table
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Table'
  /tables/{tableId}/columns:
    parameters:
    - $ref: "#/components/parameters/tableId"
    post:
      tags:
      - Table
      summary: Create column
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateColumnInput'
        required: true
      responses:
        200:
          description: Created column
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Column'
  /tables/{tableId}/columns/{columnId}:
    parameters:
    - $ref: "#/components/parameters/tableId"
    - $ref: "#/components/parameters/columnId"
    delete:
      tags:
      - Table
      summary: Delete column
      responses:
        200:
          description: Deleted
    patch:
      tags:
      - Table
      summary: Update column
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UpdateColumnInput'
        required: true
      responses:
        200:
          description: Updated column
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Column'
  /tables/{tableId}/columns/reorder:
    parameters:
    - $ref: "#/components/parameters/tableId"
    post:
      tags:
      - Table
      summary: Reorder columns
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ReorderColumnInput'
        required: true
      responses:
        200:
          description: Reordered columns
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ColumnList'
  /folders:
    post:
      tags:
      - Folder
      summary: Create folder
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateFolderInput'
        required: true
      responses:
        200:
          description: Created folder
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Folder'
  /folders/{folderId}:
    parameters:
    - $ref: "#/components/parameters/folderId"
    get:
      tags:
      - Folder
      summary: Get folder
      responses:
        200:
          description: Folder
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Folder'
    delete:
      tags:
      - Folder
      summary: Delete folder
      responses:
        200:
          description: Deleted
    patch:
      tags:
      - Folder
      summary: Update folder
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UpdateFolderInput'
        required: true
      responses:
        200:
          description: Updated folder
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Folder'
  /folders/{folderId}/children:
    parameters:
    - $ref: "#/components/parameters/folderId"
    get:
      tags:
      - Folder
      summary: Get folder's children
      description: Specify `00000000-0000-0000-0000-000000000000` as `folderId` path
        parameter and target organization id as `organizationId` query parameter for
        retrieving entries at the root folder of the organization.
      parameters:
      - $ref: "#/components/parameters/organizationIdQuery"
      - $ref: "#/components/parameters/page"
      - $ref: "#/components/parameters/pageSize"
      responses:
        200:
          description: Folder's children
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/FolderChildren'
components:
  schemas:
    PaginatedList:
      required:
      - has_next
      - total_count
      type: object
      properties:
        total_count:
          type: integer
        has_next:
          type: boolean
    CreateOrganizationInput:
      required:
      - name
      type: object
      properties:
        name:
          type: string
    UpdateOrganizationInput:
      type: object
      properties:
        name:
          type: string
    Organization:
      required:
      - created_at
      - id
      - name
      - updated_at
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    OrganizationList:
      allOf:
      - $ref: '#/components/schemas/PaginatedList'
      - required:
        - organizations
        type: object
        properties:
          organizations:
            type: array
            items:
              $ref: '#/components/schemas/Organization'
    TableFilesystemEntry:
      required:
      - created_at
      - id
      - name
      - organization_id
      - path
      - type
      - updated_at
      type: object
      properties:
        id:
          type: string
          format: uuid
        organization_id:
          type: string
          format: uuid
        type:
          type: string
          enum:
          - folder
          - table
        name:
          type: string
        path:
          type: array
          items:
            required:
            - id
            - name
            - type
            type: object
            properties:
              id:
                type: string
                format: uuid
              type:
                type: string
                enum:
                - folder
                - table
              name:
                type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    CreateTableInput:
      required:
      - name
      - organization_id
      type: object
      properties:
        organization_id:
          type: string
          format: uuid
        name:
          type: string
        parent_folder_id:
          type: string
          format: uuid
        columns:
          type: array
          items:
            $ref: '#/components/schemas/CreateColumnInput'
    UpdateTableInput:
      type: object
      properties:
        name:
          type: string
        parent_folder_id:
          type: string
          description: Specify `00000000-0000-0000-0000-000000000000` to move to the
            root folder
          format: uuid
    Table:
      allOf:
      - $ref: '#/components/schemas/TableFilesystemEntry'
      - required:
        - columns
        type: object
        properties:
          columns:
            type: array
            items:
              $ref: '#/components/schemas/Column'
    ColumnType:
      type: string
      enum:
      - string
    CreateColumnInput:
      required:
      - name
      type: object
      properties:
        index:
          type: integer
        name:
          type: string
        type:
          $ref: '#/components/schemas/ColumnType'
    UpdateColumnInput:
      type: object
      properties:
        index:
          type: integer
        name:
          type: string
        type:
          $ref: '#/components/schemas/ColumnType'
    ReorderColumnInput:
      required:
      - order
      type: object
      properties:
        order:
          type: array
          items:
            type: string
            format: uuid
    Column:
      required:
      - created_at
      - id
      - index
      - name
      - table_id
      - type
      - updated_at
      type: object
      properties:
        id:
          type: string
          format: uuid
        table_id:
          type: string
          format: uuid
        index:
          type: integer
        name:
          type: string
        type:
          $ref: '#/components/schemas/ColumnType'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    ColumnList:
      required:
      - columns
      type: object
      properties:
        columns:
          type: array
          items:
            $ref: '#/components/schemas/Column'
    CreateFolderInput:
      required:
      - name
      - organization_id
      type: object
      properties:
        organization_id:
          type: string
          format: uuid
        name:
          type: string
        parent_folder_id:
          type: string
          format: uuid
    UpdateFolderInput:
      type: object
      properties:
        name:
          type: string
        parent_folder_id:
          type: string
          description: Specify `00000000-0000-0000-0000-000000000000` to move to the
            root folder
          format: uuid
    Folder:
      allOf:
      - $ref: '#/components/schemas/TableFilesystemEntry'
    FolderChildren:
      allOf:
      - $ref: '#/components/schemas/PaginatedList'
      - required:
        - children
        type: object
        properties:
          children:
            type: array
            items:
              $ref: '#/components/schemas/TableFilesystemEntry'
  parameters:
    organizationId:
      name: organizationId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    organizationIdQuery:
      name: organizationId
      in: query
      schema:
        type: string
        format: uuid
    tableId:
      name: tableId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    columnId:
      name: columnId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    folderId:
      name: folderId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    page:
      name: page
      in: query
      schema:
        type: integer
    pageSize:
      name: pageSize
      in: query
      schema:
        type: integer
